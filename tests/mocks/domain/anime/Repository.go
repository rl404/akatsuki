// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rl404/akatsuki/internal/domain/anime/entity"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteByID(ctx context.Context, id int64) (int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, data
func (_m *Repository) Get(ctx context.Context, data entity.GetRequest) ([]*entity.Anime, int, int, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*entity.Anime
	var r1 int
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetRequest) ([]*entity.Anime, int, int, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetRequest) []*entity.Anime); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Anime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.GetRequest) int); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, entity.GetRequest) int); ok {
		r2 = rf(ctx, data)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, entity.GetRequest) error); ok {
		r3 = rf(ctx, data)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByID(ctx context.Context, id int64) (*entity.Anime, int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Anime
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Anime, int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Anime); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Anime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByIDs provides a mock function with given fields: ctx, ids
func (_m *Repository) GetByIDs(ctx context.Context, ids []int64) ([]*entity.Anime, int, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 []*entity.Anime
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]*entity.Anime, int, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*entity.Anime); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Anime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) int); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []int64) error); ok {
		r2 = rf(ctx, ids)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetHistories provides a mock function with given fields: ctx, data
func (_m *Repository) GetHistories(ctx context.Context, data entity.GetHistoriesRequest) ([]entity.History, int, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for GetHistories")
	}

	var r0 []entity.History
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetHistoriesRequest) ([]entity.History, int, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetHistoriesRequest) []entity.History); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.History)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.GetHistoriesRequest) int); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, entity.GetHistoriesRequest) error); ok {
		r2 = rf(ctx, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetIDs provides a mock function with given fields: ctx
func (_m *Repository) GetIDs(ctx context.Context) ([]int64, int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetIDs")
	}

	var r0 []int64
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]int64, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMaxID provides a mock function with given fields: ctx
func (_m *Repository) GetMaxID(ctx context.Context) (int64, int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMaxID")
	}

	var r0 int64
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOldFinishedIDs provides a mock function with given fields: ctx
func (_m *Repository) GetOldFinishedIDs(ctx context.Context) ([]int64, int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOldFinishedIDs")
	}

	var r0 []int64
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]int64, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOldNotYetIDs provides a mock function with given fields: ctx
func (_m *Repository) GetOldNotYetIDs(ctx context.Context) ([]int64, int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOldNotYetIDs")
	}

	var r0 []int64
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]int64, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOldReleasingIDs provides a mock function with given fields: ctx
func (_m *Repository) GetOldReleasingIDs(ctx context.Context) ([]int64, int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOldReleasingIDs")
	}

	var r0 []int64
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]int64, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRelatedByIDs provides a mock function with given fields: ctx, ids
func (_m *Repository) GetRelatedByIDs(ctx context.Context, ids []int64) ([]*entity.AnimeRelated, int, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetRelatedByIDs")
	}

	var r0 []*entity.AnimeRelated
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]*entity.AnimeRelated, int, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*entity.AnimeRelated); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.AnimeRelated)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) int); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []int64) error); ok {
		r2 = rf(ctx, ids)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsOld provides a mock function with given fields: ctx, id
func (_m *Repository) IsOld(ctx context.Context, id int64) (bool, int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsOld")
	}

	var r0 bool
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, data
func (_m *Repository) Update(ctx context.Context, data entity.Anime) (int, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Anime) (int, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Anime) int); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Anime) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
